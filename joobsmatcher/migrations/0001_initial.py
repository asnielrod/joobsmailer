# Generated by Django 5.0.1 on 2024-01-24 13:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Framework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ToolSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('developer', 'Developer'), ('employer', 'Employer')], default='developer', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('location', models.CharField(max_length=100)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('company_name', models.CharField(max_length=100)),
                ('industry', models.CharField(max_length=100)),
                ('company_size', models.CharField(max_length=100)),
                ('company_description', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('location', models.CharField(max_length=100)),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('years_of_experience', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('project_types', models.TextField()),
                ('previous_roles', models.TextField()),
                ('highest_degree', models.CharField(blank=True, max_length=100, null=True)),
                ('certifications', models.TextField(blank=True, null=True)),
                ('job_type', models.CharField(max_length=100)),
                ('remote_availability', models.BooleanField(default=False)),
                ('relocation_interest', models.BooleanField(default=False)),
                ('desired_salary_range', models.CharField(max_length=100)),
                ('languages_spoken', models.CharField(max_length=100)),
                ('soft_skills', models.TextField()),
                ('professional_interests', models.TextField(blank=True, null=True)),
                ('availability_date', models.DateField(blank=True, null=True)),
                ('additional_comments', models.TextField(blank=True, null=True)),
                ('database_knowledge', models.ManyToManyField(to='joobsmatcher.databaseknowledge')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='developer', to=settings.AUTH_USER_MODEL)),
                ('frameworks', models.ManyToManyField(to='joobsmatcher.framework')),
                ('programming_languages', models.ManyToManyField(to='joobsmatcher.programminglanguage')),
                ('tools_systems', models.ManyToManyField(to='joobsmatcher.toolsystem')),
            ],
        ),
        migrations.CreateModel(
            name='JobPosting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=100)),
                ('industry', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('job_title', models.CharField(max_length=100)),
                ('job_description', models.TextField()),
                ('employment_type', models.CharField(max_length=100)),
                ('required_experience', models.PositiveIntegerField()),
                ('project_type_experience', models.TextField()),
                ('required_education_level', models.CharField(max_length=100)),
                ('soft_skills_required', models.TextField()),
                ('languages_required', models.CharField(blank=True, max_length=100, null=True)),
                ('additional_skills', models.TextField(blank=True, null=True)),
                ('salary_range', models.CharField(max_length=100)),
                ('benefits', models.TextField()),
                ('professional_growth_opportunities', models.TextField()),
                ('interview_process', models.TextField()),
                ('application_deadline', models.DateField()),
                ('contact_email', models.EmailField(max_length=254)),
                ('employer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_postings', to='joobsmatcher.employer')),
                ('required_database_knowledge', models.ManyToManyField(to='joobsmatcher.databaseknowledge')),
                ('required_frameworks', models.ManyToManyField(to='joobsmatcher.framework')),
                ('required_languages', models.ManyToManyField(to='joobsmatcher.programminglanguage')),
                ('required_tools_systems', models.ManyToManyField(to='joobsmatcher.toolsystem')),
            ],
        ),
        migrations.CreateModel(
            name='JobRecommendations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='joobsmatcher.developer')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='joobsmatcher.jobposting')),
            ],
        ),
    ]
